#include "ets_sys.h"
#include "osapi.h"
#include "gpio.h"
#include "os_type.h"
#include "user_interface.h"
#include "user_config.h"
#include "uart.h"

#include "c_types.h"
#include "espconn.h"
#include "mem.h"

#define user_procTaskPrio        0
#define user_procTaskQueueLen    1
os_event_t    user_procTaskQueue[user_procTaskQueueLen];
static void loop(os_event_t *events);
LOCAL os_timer_t network_timer;
LOCAL struct espconn udpconn;

void ICACHE_FLASH_ATTR wifi_config_ap();
void udp_init();
LOCAL void ICACHE_FLASH_ATTR udp_recv(void *arg, char *pusrdata, unsigned short length);


int debug(char *text) {
	//ets_uart_printf(text);
}

//Main code function
static void ICACHE_FLASH_ATTR loop(os_event_t *events) {

  int c = uart0_rx_one_char();

//  if(c != -1) {
//   uart_tx_one_char(c);
//  }

  if (c == 'a') {
	  GPIO_OUTPUT_SET(2, 1);
  }
  if (c == 'b') {
	  GPIO_OUTPUT_SET(2, 0);
  }
  os_delay_us(100);
  system_os_post(user_procTaskPrio, 0, 0 );
}

void ICACHE_FLASH_ATTR network_wait_for_ip() {

  struct ip_info ipconfig;
  os_timer_disarm(&network_timer);
  wifi_get_ip_info(STATION_IF, &ipconfig);
  if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) {
    char page_buffer[40];
    os_sprintf(page_buffer,"myIP: %d.%d.%d.%d",IP2STR(&ipconfig.ip));
    debug(page_buffer);
    //ets_uart_printf(page_buffer);
    //safecast_send_nema("$BNRDD,1010,2015-01-06T17:31:15Z,0,0,128,V,3537.2633,N,13938.0270,E,37.70,A,9,11160");
  } else {
    char page_buffer[40];
    os_sprintf(page_buffer,"network retry, status: %d\r\n",wifi_station_get_connect_status());
    if(wifi_station_get_connect_status() == 3) wifi_station_connect();
    debug(page_buffer);
    //ets_uart_printf(page_buffer);
    os_timer_setfn(&network_timer, (os_timer_func_t *)network_wait_for_ip, NULL);
    os_timer_arm(&network_timer, 2000, 0);
  }
}

void ICACHE_FLASH_ATTR network_init() {
  debug("init network 1");
  os_timer_disarm(&network_timer);
  os_timer_setfn(&network_timer, (os_timer_func_t *)network_wait_for_ip, NULL);
  os_timer_arm(&network_timer, 2000, 0);
  debug("init network 2");
}

void ICACHE_FLASH_ATTR wifi_config_station() {
    // Wifi configuration
    char ssid[32] = SSID;
    char password[64] = SSID_PASSWORD;

    struct station_config stationConf;

    //Set station mode
    wifi_set_opmode( 0x1 );

    os_delay_us(10000);

    //Set ap settings
    stationConf.bssid_set = 0;
    os_memcpy(&stationConf.ssid, ssid, 32);
    os_memcpy(&stationConf.password, password, 64);

    wifi_station_set_config(&stationConf);
    debug("init wifi");
    debug(ssid);
    debug(password);
}

//Init function 
void ICACHE_FLASH_ATTR user_init() {

    // Set UART Speed (default appears to be rather odd 77KBPS)
    uart_init(BIT_RATE_115200,BIT_RATE_115200);

    gpio_init();
    PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO2_U, FUNC_GPIO2);
    // check GPIO setting (for config mode selection)
    PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0);
    PIN_PULLUP_EN(PERIPHS_IO_MUX_GPIO0_U);

    wifi_config_station();


    //Start os task
    system_os_task(loop, user_procTaskPrio,user_procTaskQueue, user_procTaskQueueLen);
    system_os_post(user_procTaskPrio, 0, 0 );

    network_init();
    os_delay_us(1000);
    udp_init();
}

void udp_init() {
        //static esp_udp udp;
        memset(&udpconn, 0, sizeof(struct espconn));
        //memset(&udp, 0, sizeof(esp_udp));
        espconn_create(udpconn);
        udpconn.type = ESPCONN_UDP;
        udpconn.proto.udp = (esp_udp *)os_zalloc(sizeof(esp_udp));
        udpconn.proto.udp->local_port = 1025;
        espconn_regist_recvcb(&udpconn, udp_recv);
        espconn_accept(&udpconn);
}

LOCAL void ICACHE_FLASH_ATTR udp_recv(void *arg, char *pusrdata, unsigned short length) {
	ets_uart_printf("Data received: ");
	ets_uart_printf(pusrdata);
}

