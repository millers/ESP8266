#include "mem.h"
#include "c_types.h"
#include "user_interface.h"
#include "ets_sys.h"
#include "driver/uart.h"
#include "osapi.h"
#include "espconn.h"
#include <gpio.h>

#define SSID		"Telstra6D1E79"
#define PASSWORD	"04CCBCEC36"
#define WIFI_CLIENTSSID		"Telstra6D1E79"
#define WIFI_CLIENTPASSWORD	"04CCBCEC36"

#define PORT 7777
#define SERVER_TIMEOUT 1000
#define MAX_CONNS 5
#define MAX_FRAME 2000

#define procTaskPrio        0
#define procTaskQueueLen    1


static volatile os_timer_t some_timer;
static struct espconn *pUdpServer;



//Note to self.  In future consider looking at this: http://pastebin.com/6eLxSrNz


//Tasks that happen all the time.

os_event_t    procTaskQueue[procTaskQueueLen];
static void ICACHE_FLASH_ATTR
procTask(os_event_t *events)
{
	system_os_post(procTaskPrio, 0, 0 );
	if( events->sig == 0 && events->par == 0 )
	{
		//Idle Event.
	}
}


//Timer event.
static void ICACHE_FLASH_ATTR
 myTimer(void *arg)
{
	// do stuff here
}


//Called when new packet comes in.
static void ICACHE_FLASH_ATTR
udpserver_recv(void *arg, char *pusrdata, unsigned short len)
{
	struct station_config stationConf;
	char buffer;

	ets_wdt_disable();
	ets_sprintf( buffer, "%d:%s\r\n", len, pusrdata );
	uart0_sendStr(buffer); // print out received data for debugging

	if (strcmp("1",pusrdata) == 0)  {
		ets_uart_printf("LED On\r\n");
		GPIO_OUTPUT_SET(2,1);

	} else if (strcmp("c", pusrdata) == 0) {
		ets_uart_printf("Getting....\r\n");
		wifi_station_get_config(&stationConf);
		ets_uart_printf(stationConf.ssid);
		ets_uart_printf("\r\n");
		ets_uart_printf(stationConf.password);

	} else {
		ets_uart_printf("LED Off\r\n");
		GPIO_OUTPUT_SET(2,0);
	}
}

void ICACHE_FLASH_ATTR at_recvTask()
{
	//Called from UART.
}


void user_init(void)
{
	struct station_config stationConf;
	char temp;
	os_delay_us(1000000); // delay 1 second. gives time to start serial monitor for debugging messages
	uart_init(BIT_RATE_115200, BIT_RATE_115200);
	PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO2_U, FUNC_GPIO2);

	wifi_set_opmode( 0x1 ); // set to station mode
	os_memset(stationConf.ssid, 0, sizeof(stationConf.ssid)); // zero current SSID/Password
	os_memset(stationConf.password, 0, sizeof(stationConf.password));
	stationConf.bssid_set = 0; // do not require BSSID

	ets_uart_printf("Setting config\r\n");

	os_sprintf(stationConf.ssid, "%s", SSID); // copy SSID/Password defined above
	os_sprintf(stationConf.password, "%s", PASSWORD);

	ets_uart_printf("Config set\r\n");

	ETS_UART_INTR_DISABLE();
	wifi_station_set_config(&stationConf); // enable config. note: need to call wifi_station_connect() if this is done outside user_init
	ETS_UART_INTR_ENABLE();
	ets_uart_printf("Station set\r\n");
	//wifi_station_dhcpc_start(); // not sure when this is needed?


    pUdpServer = (struct espconn *)os_zalloc(sizeof(struct espconn)); // zero UDP thingy
	ets_memset( pUdpServer, 0, sizeof( struct espconn ) );
	espconn_create( pUdpServer ); // create server
	pUdpServer->type = ESPCONN_UDP;
	pUdpServer->proto.udp = (esp_udp *)os_zalloc(sizeof(esp_udp));
	pUdpServer->proto.udp->local_port = 7777; // set port
	espconn_regist_recvcb(pUdpServer, udpserver_recv);



	if( espconn_create( pUdpServer ) )
	{
		while(1) { uart0_sendStr( "\r\nFAULT\r\n" ); }
	}

	//XXX TODO figure out how to safely re-allow this. possibly with ets_wdt_feed()
	ets_wdt_disable();

	//Add a process
	system_os_task(procTask, procTaskPrio, procTaskQueue, procTaskQueueLen);


	os_timer_disarm(&some_timer);
	os_timer_setfn(&some_timer, (os_timer_func_t *)myTimer, NULL);
	os_timer_arm(&some_timer, 500, 1);

	system_os_post(procTaskPrio, 0, 0 );
}

